{
    "uploadBasicCode" : "<nz-upload nzAction=\"https:\/\/jsonplaceholder.typicode.com\/posts\/\">\r\n    <button nz-button>\r\n        <i nz-icon nzType=\"upload\"><\/i><span>Click to Upload<\/span>\r\n    <\/button>\r\n<\/nz-upload>",
    "uploadAvatarCode" : "import { Component } from '@angular\/core';\r\nimport { NzMessageService, UploadFile } from 'ng-zorro-antd';\r\n\r\n@Component({\r\n    selector: 'nz-demo-upload-avatar',\r\n    template: `\r\n        <nz-upload class=\"avatar-uploader\"\r\n            nzAction=\"https:\/\/jsonplaceholder.typicode.com\/posts\/\"\r\n            nzName=\"avatar\"\r\n            nzListType=\"picture-card\"\r\n            [nzShowUploadList]=\"false\"\r\n            [nzBeforeUpload]=\"beforeUpload\"\r\n            (nzChange)=\"handleChange($event)\">\r\n            <ng-container *ngIf=\"!avatarUrl\">\r\n                <i nz-icon nzType=\"plus\"><\/i>\r\n                <div class=\"ant-upload-text\">Upload<\/div>\r\n            <\/ng-container>\r\n            <img *ngIf=\"avatarUrl\" [src]=\"avatarUrl\" class=\"avatar\">\r\n        <\/nz-upload>\r\n    `\r\n    ]\r\n})\r\nexport class NzDemoUploadAvatarComponent {\r\n    loading = false;\r\n    avatarUrl: string;\r\n\r\n    constructor(private msg: NzMessageService) {}\r\n\r\n    beforeUpload = (file: File) => {\r\n        const isJPG = file.type === 'image\/jpeg';\r\n        if (!isJPG) {\r\n            this.msg.error('You can only upload JPG file!');\r\n        }\r\n        const isLt2M = file.size \/ 1024 \/ 1024 < 2;\r\n        if (!isLt2M) {\r\n            this.msg.error('Image must smaller than 2MB!');\r\n        }\r\n        return isJPG && isLt2M;\r\n    }\r\n\r\n    private getBase64(img: File, callback: (img: {}) => void): void {\r\n        const reader = new FileReader();\r\n        reader.addEventListener('load', () => callback(reader.result));\r\n        reader.readAsDataURL(img);\r\n    }\r\n\r\n    handleChange(info: { file: UploadFile }): void {\r\n        if (info.file.status === 'uploading') {\r\n            this.loading = true;\r\n            return;\r\n        }\r\n        if (info.file.status === 'done') {\r\n            \/\/ Get this url from response in real world.\r\n            this.getBase64(info.file.originFileObj, (img: string) => {\r\n            this.loading = false;\r\n            this.avatarUrl = img;\r\n            });\r\n        }\r\n    }\r\n}",
    "uploadDefaultFileCode" : "import { Component } from '@angular\/core';\r\n\r\n@Component({\r\n    selector: 'nz-demo-upload-file-list',\r\n    template: `\r\n        <nz-upload\r\n            nzAction=\"https:\/\/jsonplaceholder.typicode.com\/posts\/\"\r\n            [nzFileList]=\"fileList\">\r\n            <button nz-button>\r\n                <i nz-icon nzType=\"upload\"><\/i><span>Upload<\/span>\r\n            <\/button>\r\n        <\/nz-upload>\r\n    `\r\n})\r\nexport class NzDemoUploadFileListComponent {\r\n    fileList = [\r\n        {\r\n            uid: 1,\r\n            name: 'xxx.png',\r\n            status: 'done',\r\n            response: 'Server Error 500', \/\/ custom error message to show\r\n            url: 'http:\/\/www.baidu.com\/xxx.png'\r\n        },\r\n        {\r\n            uid: 2,\r\n            name: 'yyy.png',\r\n            status: 'done',\r\n            url: 'http:\/\/www.baidu.com\/yyy.png'\r\n        },\r\n        {\r\n            uid: 3,\r\n            name: 'zzz.png',\r\n            status: 'error',\r\n            response: 'Server Error 500', \/\/ custom error message to show\r\n            url: 'http:\/\/www.baidu.com\/zzz.png'\r\n        }\r\n    ];\r\n}",
    "uploadPictureWallCode" : "import { Component } from '@angular\/core';\r\nimport { NzMessageService, UploadFile } from 'ng-zorro-antd';\r\n\r\n@Component({\r\n    selector: 'nz-demo-upload-picture-card',\r\n    template: `\r\n        <div class=\"clearfix\">\r\n            <nz-upload\r\n                nzAction=\"https:\/\/jsonplaceholder.typicode.com\/posts\/\"\r\n                nzListType=\"picture-card\"\r\n                [(nzFileList)]=\"fileList\"\r\n                [nzShowButton]=\"fileList.length < 3\"\r\n                [nzPreview]=\"handlePreview\">\r\n                <i nz-icon nzType=\"plus\"><\/i>\r\n                <div class=\"ant-upload-text\">Upload<\/div>\r\n            <\/nz-upload>\r\n            <nz-modal [nzVisible]=\"previewVisible\" [nzContent]=\"modalContent\" [nzFooter]=\"null\" (nzOnCancel)=\"previewVisible=false\">\r\n                <ng-template #modalContent>\r\n                    <img [src]=\"previewImage\" [ngStyle]=\"{ 'width': '100%' }\" \/>\r\n                <\/ng-template>\r\n            <\/nz-modal>\r\n        <\/div>\r\n    `\r\n})\r\nexport class NzDemoUploadPictureCardComponent {\r\n    fileList = [\r\n        {\r\n            uid: -1,\r\n            name: 'xxx.png',\r\n            status: 'done',\r\n            url: 'https:\/\/zos.alipayobjects.com\/rmsportal\/jkjgkEfvpUPVyRjUImniVslZfWPnJuuZ.png'\r\n        }\r\n    ];\r\n    previewImage = '';\r\n    previewVisible = false;\r\n\r\n    constructor(private msg: NzMessageService) {}\r\n\r\n    handlePreview = (file: UploadFile) => {\r\n        this.previewImage = file.url || file.thumbUrl;\r\n        this.previewVisible = true;\r\n    }\r\n}",
    "uploadFilterCode" : "import { Component } from '@angular\/core';\r\nimport { UploadFile } from 'ng-zorro-antd';\r\n\r\n@Component({\r\n    selector: 'nz-demo-upload-filter',\r\n    template: `\r\n        <nz-upload\r\n            nzAction=\"https:\/\/jsonplaceholder.typicode.com\/posts\/\"\r\n            [nzFileList]=\"fileList\"\r\n            nzMultiple\r\n            [nzLimit]=\"2\"\r\n            (nzChange)=\"handleChange($event)\">\r\n            <button nz-button>\r\n                <i nz-icon nzType=\"upload\"><\/i><span>Upload<\/span>\r\n            <\/button>\r\n        <\/nz-upload>\r\n    `\r\n})\r\nexport class NzDemoUploadFilterComponent {\r\n    fileList = [\r\n        {\r\n            uid: -1,\r\n            name: 'xxx.png',\r\n            status: 'done',\r\n            url: 'http:\/\/www.baidu.com\/xxx.png'\r\n        }\r\n    ];\r\n\r\n    \/\/ tslint:disable-next-line:no-any\r\n    handleChange(info: any): void {\r\n        const fileList = info.fileList;\r\n        \/\/ 2. read from response and show file link\r\n        if (info.file.response) {\r\n            info.file.url = info.file.response.url;\r\n        }\r\n        \/\/ 3. filter successfully uploaded files according to response from server\r\n        this.fileList = fileList.filter(item => {\r\n            if (item.response) {\r\n                return item.response.status === 'success';\r\n            }\r\n            return true;\r\n        });\r\n    }\r\n}",
    "uploadDragNDropCode" : "import { Component } from '@angular\/core';\r\nimport { NzMessageService, UploadFile } from 'ng-zorro-antd';\r\n\r\n@Component({\r\n    selector: 'nz-demo-upload-drag',\r\n    template: `\r\n        <nz-upload\r\n            nzType=\"drag\"\r\n            [nzMultiple]=\"true\"\r\n            [nzLimit]=\"2\"\r\n            nzAction=\"https:\/\/jsonplaceholder.typicode.com\/posts\/\"\r\n            (nzChange)=\"handleChange($event)\">\r\n            <p class=\"ant-upload-drag-icon\">\r\n                <i nz-icon nzType=\"inbox\"><\/i>\r\n            <\/p>\r\n            <p class=\"ant-upload-text\">Click or drag file to this area to upload<\/p>\r\n            <p class=\"ant-upload-hint\">Support for a single or bulk upload. Strictly prohibit from uploading company data or other band files<\/p>\r\n        <\/nz-upload>\r\n    `\r\n})\r\nexport class NzDemoUploadDragComponent {\r\n    constructor(private msg: NzMessageService) {}\r\n    \/\/ tslint:disable-next-line:typedef\r\n    handleChange({ file, fileList }): void {\r\n        const status = file.status;\r\n        if (status !== 'uploading') {\r\n            console.log(file, fileList);\r\n        }\r\n        if (status === 'done') {\r\n            this.msg.success(`${file.name} file uploaded successfully.`);\r\n        } else if (status === 'error') {\r\n            this.msg.error(`${file.name} file upload failed.`);\r\n        }\r\n    }\r\n}",
    "uploadDirectoryCode" : "<nz-upload\r\n    nzAction=\"https:\/\/jsonplaceholder.typicode.com\/posts\/\"\r\n    nzDirectory>\r\n    <button nz-button>\r\n        <i nz-icon nzType=\"upload\"><\/i> Upload Directory\r\n    <\/button>\r\n<\/nz-upload>",
    "uploadManuallyCode" : "import { HttpClient, HttpRequest, HttpResponse } from '@angular\/common\/http';\r\nimport { Component } from '@angular\/core';\r\nimport { NzMessageService, UploadFile } from 'ng-zorro-antd';\r\nimport { filter } from 'rxjs\/operators';\r\n\r\n@Component({\r\n    selector: 'nz-demo-upload-manually',\r\n    template: `\r\n        <nz-upload\r\n            [(nzFileList)]=\"fileList\"\r\n            [nzBeforeUpload]=\"beforeUpload\">\r\n            <button nz-button>\r\n                <i nz-icon nzType=\"upload\"><\/i><span>Select File<\/span>\r\n            <\/button>\r\n        <\/nz-upload>\r\n        <button nz-button [nzType]=\"'primary'\" [nzLoading]=\"uploading\" (click)=\"handleUpload()\" [disabled]=\"fileList.length == 0\" style=\"margin-top: 16px\">\r\n            {{ uploading ? 'Uploading' : 'Start Upload' }}\r\n        <\/button>\r\n    `\r\n})\r\nexport class NzDemoUploadManuallyComponent {\r\n    uploading = false;\r\n    fileList: UploadFile[] = [];\r\n\r\n    constructor(private http: HttpClient, private msg: NzMessageService) {}\r\n\r\n    beforeUpload = (file: UploadFile): boolean => {\r\n        this.fileList.push(file);\r\n        return false;\r\n    }\r\n\r\n    handleUpload(): void {\r\n        const formData = new FormData();\r\n        \/\/ tslint:disable-next-line:no-any\r\n        this.fileList.forEach((file: any) => {\r\n        formData.append('files[]', file);\r\n        });\r\n        this.uploading = true;\r\n        \/\/ You can use any AJAX library you like\r\n        const req = new HttpRequest('POST', 'https:\/\/jsonplaceholder.typicode.com\/posts\/', formData, {\r\n        \/\/ reportProgress: true\r\n    });\r\n    this.http\r\n        .request(req)\r\n        .pipe(filter(e => e instanceof HttpResponse))\r\n        .subscribe(\r\n        (event: {}) => {\r\n            this.uploading = false;\r\n            this.msg.success('upload successfully.');\r\n        },\r\n        err => {\r\n            this.uploading = false;\r\n            this.msg.error('upload failed.');\r\n        });\r\n    }\r\n}",
    "uploadPicturesListCode" : "import { Component } from '@angular\/core';\r\nimport { NzMessageService, UploadFile } from 'ng-zorro-antd';\r\n\r\n@Component({\r\n    selector: 'nz-demo-upload-picture-style',\r\n    template: `\r\n        <div class=\"clearfix m-b-40\">\r\n            <nz-upload\r\n                nzAction=\"https:\/\/jsonplaceholder.typicode.com\/posts\/\"\r\n                nzListType=\"picture\"\r\n                [(nzFileList)]=\"fileList1\">\r\n                <button nz-button>\r\n                <i nz-icon nzType=\"upload\"><\/i><span>Upload<\/span>\r\n                <\/button>\r\n            <\/nz-upload>\r\n        <\/div>\r\n        <div class=\"clearfix\">\r\n            <nz-upload class=\"upload-list-inline\"\r\n                nzAction=\"https:\/\/jsonplaceholder.typicode.com\/posts\/\"\r\n                nzListType=\"picture\"\r\n                [(nzFileList)]=\"fileList2\">\r\n                <button nz-button>\r\n                <span><i nz-icon nzType=\"upload\"><\/i> Upload<\/span>\r\n                <\/button>\r\n            <\/nz-upload>\r\n        <\/div>\r\n    `\r\n})\r\nexport class NzDemoUploadPictureStyleComponent {\r\n    defaultFileList = [\r\n    {\r\n        uid: -1,\r\n        name: 'xxx.png',\r\n        status: 'done',\r\n        url: 'https:\/\/zos.alipayobjects.com\/rmsportal\/jkjgkEfvpUPVyRjUImniVslZfWPnJuuZ.png',\r\n        thumbUrl: 'https:\/\/zos.alipayobjects.com\/rmsportal\/jkjgkEfvpUPVyRjUImniVslZfWPnJuuZ.png'\r\n    },\r\n    {\r\n        uid: -2,\r\n        name: 'yyy.png',\r\n        status: 'done',\r\n        url: 'https:\/\/zos.alipayobjects.com\/rmsportal\/jkjgkEfvpUPVyRjUImniVslZfWPnJuuZ.png',\r\n        thumbUrl: 'https:\/\/zos.alipayobjects.com\/rmsportal\/jkjgkEfvpUPVyRjUImniVslZfWPnJuuZ.png'\r\n    }\r\n    ];\r\n\r\n    fileList1 = [...this.defaultFileList];\r\n    fileList2 = [...this.defaultFileList];\r\n\r\n    constructor(private msg: NzMessageService) {}\r\n}",
    "uploadCustomRequestCode" : "import { Component } from '@angular\/core';\r\nimport { HttpRequest, HttpClient, HttpEventType, HttpEvent, HttpResponse } from '@angular\/common\/http';\r\nimport { NzMessageService, UploadXHRArgs } from 'ng-zorro-antd';\r\nimport { forkJoin } from 'rxjs';\r\n\r\n@Component({\r\n    selector: 'nz-demo-upload-custom-request',\r\n    template: `\r\n        <nz-upload\r\n            nzAction=\"https:\/\/jsonplaceholder.typicode.com\/posts\/\"\r\n            [nzCustomRequest]=\"customReq\">\r\n            <button nz-button>\r\n                <i nz-icon nzType=\"upload\"><\/i><span>Click to Upload<\/span>\r\n            <\/button>\r\n        <\/nz-upload>\r\n    `\r\n})\r\nexport class NzDemoUploadCustomRequestComponent {\r\n\r\n    constructor(private http: HttpClient, private msg: NzMessageService) {}\r\n\r\n    customReq = (item: UploadXHRArgs) => {\r\n   \r\n    const formData = new FormData();\r\n    \/\/ tslint:disable-next-line:no-any\r\n    formData.append('file', item.file as any);\r\n    formData.append('id', '1000');\r\n    const req = new HttpRequest('POST', item.action, formData, {\r\n        reportProgress : true,\r\n        withCredentials: true\r\n    });\r\n    \r\n    return this.http.request(req).subscribe((event: HttpEvent<{}>) => {\r\n        if (event.type === HttpEventType.UploadProgress) {\r\n            if (event.total > 0) {\r\n                \/\/ tslint:disable-next-line:no-any\r\n                (event as any).percent = event.loaded \/ event.total * 100;\r\n            }\r\n                item.onProgress(event, item.file);\r\n            } else if (event instanceof HttpResponse) {\r\n                item.onSuccess(event.body, item.file, event);\r\n            }\r\n        }, (err) => {\r\n            item.onError(err, item.file);\r\n        });\r\n    }\r\n    customBigReq = (item: UploadXHRArgs) => {\r\n        const size = item.file.size;\r\n        const chunkSize = parseInt((size \/ 3) + '', 10);\r\n        const maxChunk = Math.ceil(size \/ chunkSize);\r\n        const reqs = Array(maxChunk).fill(0).map((v: {}, index: number) => {\r\n            const start = index * chunkSize;\r\n            let end = start + chunkSize;\r\n            if (size - end < 0) {\r\n                end = size;\r\n            }\r\n            const formData = new FormData();\r\n            formData.append('file', item.file.slice(start, end));\r\n            formData.append('start', start.toString());\r\n            formData.append('end', end.toString());\r\n            formData.append('index', index.toString());\r\n            const req = new HttpRequest('POST', item.action, formData, {\r\n                withCredentials: true\r\n            });\r\n                return this.http.request(req);\r\n            });\r\n            return forkJoin(...reqs).subscribe(resules => {\r\n                item.onSuccess({}, item.file, event);\r\n            }, (err) => {\r\n                item.onError(err, item.file);\r\n        });\r\n    }\r\n}",
    "uploadAPICode1" : "{\r\n    file: { \/* ... *\/ },\r\n    fileList: [ \/* ... *\/ ],\r\n    event: { \/* ... *\/ },\r\n}",
    "uploadAPICode2" : "{\r\n    uid: 'uid',      \/\/ unique identifier\r\n    name: 'xx.png'   \/\/ file name\r\n    status: 'done', \/\/ options\uFF1Auploading, done, error, removed\r\n    response: '{\"status\": \"success\"}' \/\/ response from server\r\n}"
}